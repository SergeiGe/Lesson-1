# 1. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ.
# –°—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∏—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

# stroka = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É \n')
#
# def count_glas_soglas(str_):
#     glas = 0
#     soglas = 0
#     for i in str_:
#         if i.lower() in '–∞–æ–∏—ã–µ—ë—ç—É—é—èaeiou':
#             glas += 1
#         elif i.isalpha(): soglas += 1
#     return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö:', glas, '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö:',soglas
#
#
# print(*count_glas_soglas(stroka))
#
# 2. –§—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º —Ü–µ–ª–æ–º —á–∏—Å–ª–µ n –ø–æ—Å—á–∏—Ç–∞–µ—Ç n + nn + nnn.

# def count_summ(n):
#     return n + n*n + n*n*n
#
# print(count_summ(3))
#
#
# # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# def count_sum_posled(n, st=2):
#     if st == 0:
#         return n
#     else:
#         return n + n * count_sum_posled(n, st-1)
#
# print(count_sum_posled(3))

#
# 3. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–π x –æ—Ç -10 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —à–∞–≥–æ–º, —Ä–∞–≤–Ω—ã–º 1.
# y = ùë• ^2 –ø—Ä–∏ -5 <= x <= 5;
# y = 2*|x|-1 –ø—Ä–∏ x < -5;
# y = 2x –ø—Ä–∏ x > 5.
# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x,
# –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (y).
#
#
# def vychislyayet_funct(x):
#     if -5 <= x <= 5: y = x ** 2
#     elif x < -5: y = 2 * abs(x) - 1
#     elif x > 5: y = 2 * x
#     else: print('–û—à–∏–±–∫–∞!')
#     return y
#
# for s in range(-10,11):
#     print('–ø—Ä–∏ x =', s, ': y = ', vychislyayet_funct(s))


# 4. –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂, —Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤ –∫–æ—Ä—Ç–µ–∂–µ —Å—Ç—Ä–æ–∫
#    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, —Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º —Å—Ç—Ä–æ–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª
#    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ, —Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–∏—Ñ—Ä –≤ —ç—Ç–æ–º —á–∏—Å–ª–µ
#    –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
#    –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "Error"
#
# def multi_funct(item):
#     if type(item) == tuple:
#         return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ—Ä—Ç–µ–∂–µ:', len(item)
#     elif type(item) == list:
#         number_strok = 0
#         number_chisel = 0
#         for i in item:
#             if type(i) == str: number_strok += 1
#             elif type(i) == int or float: number_chisel += 1
#             return f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {number_strok} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ: {number_chisel}'
#     elif type(item) == int or float: return f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ: {len(str(item))}'
#     elif type(item) == str: return f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ: {len(item)}'
#     else: return 'Error!'
#
#
#
#
# print(multi_funct([1, 1.23, 'abc', 'ABC', 6.45, 2, 3, 4, 4.98]))
# print(multi_funct(12.3))

# print(type((1,)))
# sp = ['hjhjhj', 1, '2', 4, '–ª–æ–æ–ª–ª', 5]
# a = [1, 1.23, 'abc', 'ABC', 6.45, 2, 3, 4, 4.98]
# print(list(map(type, a)).count(int))


# 5. –ù–∞–ø–∏—Å–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é

# def decorator_count(func):
#     def wrapper(*args, **kwargs):
#         wrapper.count += 1
#         res = func(*args, **kwargs)
#         print(f'–í –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏—è {func.__name__} –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å {wrapper.count} —Ä–∞–∑')
#         return res
#     wrapper.count = 0
#     return wrapper
# @decorator_count
# def add(a, b):
#     return(f'–°—É–º–º–∞ —á–∏—Å–µ–ª {a} –∏ {b} —Ä–∞–≤–Ω–∞: {a + b}')
#
# print(add(2, 3))
# print(add(20, 3))
# print(add(20, 30))